# Generated by Django 5.0.4 on 2024-05-24 15:47

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Achivement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, unique=True, validators=[django.core.validators.MinLengthValidator(5)])),
                ('requirements', models.CharField(max_length=60, unique=True, validators=[django.core.validators.MinLengthValidator(5)])),
                ('points', models.IntegerField()),
                ('image', models.URLField(default='https://www.svgrepo.com/show/15494/pizza.svg')),
            ],
            options={
                'db_table': 'Achivement',
            },
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, unique=True, validators=[django.core.validators.MinLengthValidator(5)])),
                ('type', models.CharField(max_length=30, validators=[django.core.validators.MinLengthValidator(5)])),
                ('unlock_code', models.IntegerField()),
                ('description', models.TextField(default='This is a restaurant')),
                ('image', models.URLField(default='https://media.istockphoto.com/id/1079901206/photo/3d-render-of-luxury-restaurant-interior.jpg?s=612x612&w=0&k=20&c=kKj5Uw0ZpuWKX8ZX6eXuKGc1sP86fMjIbZJFbWl9-ZM=')),
                ('map_link', models.URLField(default='https://www.google.com/maps/@51.1117445,17.0595713,19.4z?authuser=0&entry=ttu')),
                ('rating_average', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('city', models.CharField(default='Wroc≈Çaw', max_length=40, validators=[django.core.validators.MinLengthValidator(2)])),
                ('street', models.CharField(default='Plac Grunwaldzki', max_length=40, validators=[django.core.validators.MinLengthValidator(2)])),
                ('street_number', models.IntegerField(default=4)),
            ],
            options={
                'db_table': 'Restaurant',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('name', models.CharField(max_length=30, unique=True, validators=[django.core.validators.MinLengthValidator(5)])),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('password', models.CharField(max_length=255, validators=[django.core.validators.MinLengthValidator(8)])),
                ('points', models.IntegerField(default=0)),
                ('is_staff', models.BooleanField(default=False)),
                ('image', models.URLField(default='https://t3.ftcdn.net/jpg/05/53/79/60/360_F_553796090_XHrE6R9jwmBJUMo9HKl41hyHJ5gqt9oz.jpg')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'User',
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating_value', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.restaurant')),
            ],
            options={
                'db_table': 'Rating',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('date', models.DateTimeField()),
                ('to_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main_app.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.restaurant')),
            ],
            options={
                'db_table': 'Comment',
            },
        ),
        migrations.CreateModel(
            name='Unlocked_Achivement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('achivement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.achivement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Unlocked_Achivement',
            },
        ),
        migrations.CreateModel(
            name='Visited_Restaurant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.restaurant')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Visited_Restaurant',
            },
        ),
        migrations.AddConstraint(
            model_name='unlocked_achivement',
            constraint=models.UniqueConstraint(fields=('user', 'achivement'), name='unique_user_achivement'),
        ),
        migrations.AddConstraint(
            model_name='visited_restaurant',
            constraint=models.UniqueConstraint(fields=('user', 'restaurant'), name='unique_user_restaurant'),
        ),
    ]
